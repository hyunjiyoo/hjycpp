#include <iostream>
#include <fstream>
#include <string>
using namespace std;
const int MAX = 50; // 어디서든 써야해서 DocWriter.h 에 넣는게 가장 좋다.
class DocWriter {
protected:
	char fileName[MAX];
	string content;
public:
	DocWriter();
	DocWriter(const char* fileName, const string& content);
	DocWriter(const DocWriter& obj); // 복사생성자
	~DocWriter();
	void setFileName(const char* fileName);
	void setContent(const string& content);
	void Write();
};
DocWriter::DocWriter() {
	cout << "Doc:인자 없는 생성자" << endl;
	strcpy_s(this->fileName, MAX, "noName.txt");
	this->content = "There is no content.";
}
DocWriter::DocWriter(const char* fileName, const string& content) {
	cout << "Doc:인자 있는 생성자" << endl;
	strcpy_s(this->fileName, MAX, fileName);
	this->content = content;
}
DocWriter::DocWriter(const DocWriter& obj) {
	cout << "Doc:복사 생성자" << endl;
	strcpy_s(this->fileName, MAX, obj.fileName);
	this->content = obj.content;
}
DocWriter::~DocWriter() {
	cout << "Doc:소멸자" << endl;
}
void DocWriter::setFileName(const char* fileName) {
	strcpy_s(this->fileName, MAX, fileName);
}
void DocWriter::setContent(const string& content) {
	this->content = content;
}
void DocWriter::Write() {
	ofstream fout;
	fout.open(this->fileName);
	if (!fout) {
		cout << "Error: " << this->fileName << " 열 수 없음" << endl;
		return;
	}
	fout << "# CONTENT #" << endl << endl;
	fout << this->content;
	fout.close();
}
class HTMLWriter :public DocWriter {
protected:
	char fontName[MAX];
	char fontColor[MAX];
	int fontSize;
public:
	HTMLWriter();
	HTMLWriter(const char* fileName, const string& content,
		const char* fontName, const char* fontColor, int fontSize);
	HTMLWriter(const HTMLWriter& obj);
	~HTMLWriter();
	void Write();
	void SetFont(const char* fontName, const char* fontColor, int fontSize);
};
HTMLWriter::HTMLWriter()
	:DocWriter()
{
	cout << "HTML: 인자 없는 생성자" << endl;
	strcpy_s(this->fileName, MAX, "noName.html");
	strcpy_s(this->fontName, MAX, "궁서");
	strcpy_s(this->fontColor, MAX, "Red");
	this->fontSize = 3;
}
HTMLWriter::HTMLWriter(const char* fileName, const string& content,
	const char* fontName, const char* fontColor, int fontSize)
	:DocWriter(fileName, content)
{
	cout << "HTML: 인자 있는 생성자" << endl;
	strcpy_s(this->fontName, strlen(fontName) + 1, fontName);
	strcpy_s(this->fontColor, strlen(fontColor) + 1, fontColor);
	this->fontSize = fontSize;
}
HTMLWriter::HTMLWriter(const HTMLWriter& obj) {
	cout << "HTML: 복사 생성자" << endl;
}
HTMLWriter::~HTMLWriter() {
	cout << "HTML: 소멸자" << endl;
}
void HTMLWriter::Write() {
	ofstream fout;
	fout.open(this->fileName);
	if (!fout) {
		cout << "Error: " << this->fileName << " 열 수 없음" << endl;
		return;
	}
	fout << "<HTML><HEAD><TITLE>";
	fout << "This document was generated by HTMLWriter";
	fout << "</TITLE></HEAD><BODY>";
	fout << "<H1>Content</H1>";

	fout << "<Font name='" << this->fontName << "'";
	fout << " size='" << this->fontSize << "'";
	fout << " color='" << this->fontColor << "'>";

	fout << this->content;

	fout << "</Font>";

	fout << "</BODY></HTML>";
}
void HTMLWriter::SetFont(const char* fontName, const char* fontColor, int fontSize) {
	strcpy_s(this->fontName, strlen(fontName) + 1, fontName);
	strcpy_s(this->fontColor, strlen(fontColor) + 1, fontColor);
	this->fontSize = fontSize;
}
int main() {
	// 형변환 연습
	DocWriter b_obj("test.txt", "I'm in Base Class.");
	HTMLWriter d_obj("test.html", "I'm in Derived Class", "Arial", "red", 12);

	// 1. 객체간 형변환 Base = Derived만 허용됨.
	//b_obj = d_obj; // 암묵적 Up casting OK.
	//b_obj.Write(); // file이름은 test.html, 내용은 derived content.
	//// d_obj = b_obj; // 객체간 암묵적 Down casting 허용 안됨!! 
	//// d_obj = (HTMLWriter)b_obj; // 객체간 명시적 Down casting 허용 안됨.

	// 2. 포인터간 형변환. 암묵적 Up casting, 암묵적 Down casting, 명시적 Down casting
	// 어떤 에러사항이 나타나는가?
	DocWriter* bp = &b_obj;
	HTMLWriter* dp = &d_obj;

	bp = dp;
	bp->Write(); // file이름은 test.html (메모장방식의 Write()).
	// dp = bp; // 포인터간 암묵적 Down Casting 허용 안됨.
	dp = (HTMLWriter*)bp; // 포인터간 명시적 Down Casting
	dp->Write(); // file이름은 test.html (태깅방식의 Write()).


	return 0;
}